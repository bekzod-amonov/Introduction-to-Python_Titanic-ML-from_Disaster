{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1b524d7e-2b20-4198-9639-f442c93bbf28",
   "metadata": {},
   "source": [
    "# Notebook Setup"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96a2e279-aa1b-42fc-9991-1e24c344318b",
   "metadata": {},
   "source": [
    "<div style=\"text-align: justify;\">In this setup phase, essential modules and functions are imported to facilitate data preprocessing, feature engineering, hyperparameter tuning, model training, and evaluation processes. Additionally, common data manipulation and visualization libraries, such as Pandas, Matplotlib, and Seaborn, are included alongside scikit-learn's machine learning and preprocessing tools. This preparation step ensures that all necessary tools are readily available for conducting a comprehensive analysis and developing machine learning models to predict Titanic survival outcomes.</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "24ae1880-ae91-4cef-a8af-7311c3bc97ef",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Import necessary modules from the package\n",
    "from titanic_survival_package.data_preprocessing import load_dataset,demonstrate_preprocessing, fill_missing_values, preprocess_data\n",
    "from titanic_survival_package.feature_engineering import create_family_size_feature, extract_and_process_titles, add_interaction_terms, drop_unnecessary_features\n",
    "from titanic_survival_package.hyperparameter_tuning import tune_hyperparameters_grid, tune_hyperparameters_random\n",
    "from titanic_survival_package.models import ModelTrainer, ModelEvaluator, train_stacking_model, generate_submission\n",
    "\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b009befd-6bab-46b0-b1ea-bbd80990456e",
   "metadata": {},
   "source": [
    "# Load and Preprocess the Data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5848cb0-3df7-4829-a01e-4a092ab9a88a",
   "metadata": {},
   "source": [
    "<div style=\"text-align: justify;\">\n",
    "    During data loading and preprocessing, an initial analysis reveals insights into feature statistics, missing values, and data diversity. A correlation matrix further explores relationships, especially between numerical features and the 'Survived' target, guiding preprocessing and feature engineering to enhance model accuracy.\n",
    "A positive correlation between 'Survived' and 'Sex' suggests females had a higher survival rate, while a negative correlation with 'Pclass' highlights lower survival rates among lower-class passengers. Engineered features such as 'FamilySize', 'Title_Master', 'Title_Miss', 'Title_Mr', 'Title_Mrs', and 'Age_Pclass' are incorporated, reflecting detailed aspects of the dataset conducive to model refinement.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "73c668c0-4b41-4af5-91fb-bbf65397cffb",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(        PassengerId    Survived      Pclass         Sex         Age  \\\n",
       " count    891.000000  891.000000  891.000000  891.000000  891.000000   \n",
       " unique          NaN         NaN         NaN         NaN         NaN   \n",
       " top             NaN         NaN         NaN         NaN         NaN   \n",
       " freq            NaN         NaN         NaN         NaN         NaN   \n",
       " mean     446.000000    0.383838    2.308642    0.352413   29.361582   \n",
       " std      257.353842    0.486592    0.836071    0.477990   13.019697   \n",
       " min        1.000000    0.000000    1.000000    0.000000    0.420000   \n",
       " 25%      223.500000    0.000000    2.000000    0.000000   22.000000   \n",
       " 50%      446.000000    0.000000    3.000000    0.000000   28.000000   \n",
       " 75%      668.500000    1.000000    3.000000    1.000000   35.000000   \n",
       " max      891.000000    1.000000    3.000000    1.000000   80.000000   \n",
       " \n",
       "              SibSp       Parch        Fare    Embarked  FamilySize  \\\n",
       " count   891.000000  891.000000  891.000000  891.000000  891.000000   \n",
       " unique         NaN         NaN         NaN         NaN         NaN   \n",
       " top            NaN         NaN         NaN         NaN         NaN   \n",
       " freq           NaN         NaN         NaN         NaN         NaN   \n",
       " mean      0.523008    0.381594   32.204208    0.361392    1.904602   \n",
       " std       1.102743    0.806057   49.693429    0.635673    1.613459   \n",
       " min       0.000000    0.000000    0.000000    0.000000    1.000000   \n",
       " 25%       0.000000    0.000000    7.910400    0.000000    1.000000   \n",
       " 50%       0.000000    0.000000   14.454200    0.000000    1.000000   \n",
       " 75%       1.000000    0.000000   31.000000    1.000000    2.000000   \n",
       " max       8.000000    6.000000  512.329200    2.000000   11.000000   \n",
       " \n",
       "        Title_Master Title_Miss Title_Mr Title_Mrs Title_Rare  Age_Pclass  \n",
       " count           891        891      891       891        891  891.000000  \n",
       " unique            2          2        2         2          2         NaN  \n",
       " top           False      False     True     False      False         NaN  \n",
       " freq            851        706      517       765        868         NaN  \n",
       " mean            NaN        NaN      NaN       NaN        NaN   64.089607  \n",
       " std             NaN        NaN      NaN       NaN        NaN   32.494562  \n",
       " min             NaN        NaN      NaN       NaN        NaN    0.920000  \n",
       " 25%             NaN        NaN      NaN       NaN        NaN   40.000000  \n",
       " 50%             NaN        NaN      NaN       NaN        NaN   63.000000  \n",
       " 75%             NaN        NaN      NaN       NaN        NaN   84.000000  \n",
       " max             NaN        NaN      NaN       NaN        NaN  222.000000  ,\n",
       " PassengerId     0\n",
       " Survived        0\n",
       " Pclass          0\n",
       " Sex             0\n",
       " Age             0\n",
       " SibSp           0\n",
       " Parch           0\n",
       " Fare            0\n",
       " Embarked        0\n",
       " FamilySize      0\n",
       " Title_Master    0\n",
       " Title_Miss      0\n",
       " Title_Mr        0\n",
       " Title_Mrs       0\n",
       " Title_Rare      0\n",
       " Age_Pclass      0\n",
       " dtype: int64,\n",
       " PassengerId     891\n",
       " Survived          2\n",
       " Pclass            3\n",
       " Sex               2\n",
       " Age              88\n",
       " SibSp             7\n",
       " Parch             7\n",
       " Fare            248\n",
       " Embarked          3\n",
       " FamilySize        9\n",
       " Title_Master      2\n",
       " Title_Miss        2\n",
       " Title_Mr          2\n",
       " Title_Mrs         2\n",
       " Title_Rare        2\n",
       " Age_Pclass      128\n",
       " dtype: int64,\n",
       "               PassengerId  Survived    Pclass       Sex       Age     SibSp  \\\n",
       " PassengerId      1.000000 -0.005007 -0.035144 -0.042939  0.034212 -0.057527   \n",
       " Survived        -0.005007  1.000000 -0.338481  0.543351 -0.064910 -0.035322   \n",
       " Pclass          -0.035144 -0.338481  1.000000 -0.131900 -0.339898  0.083081   \n",
       " Sex             -0.042939  0.543351 -0.131900  1.000000 -0.081163  0.114631   \n",
       " Age              0.034212 -0.064910 -0.339898 -0.081163  1.000000 -0.233296   \n",
       " SibSp           -0.057527 -0.035322  0.083081  0.114631 -0.233296  1.000000   \n",
       " Parch           -0.001652  0.081629  0.018443  0.245489 -0.172482  0.414838   \n",
       " Fare             0.012658  0.257307 -0.549500  0.182333  0.096688  0.159651   \n",
       " Embarked        -0.030467  0.106811  0.045702  0.116569 -0.009165 -0.059961   \n",
       " FamilySize      -0.040143  0.016639  0.065997  0.200988 -0.245619  0.890712   \n",
       " Title_Master    -0.026151  0.085221  0.082081 -0.159934 -0.373960  0.349559   \n",
       " Title_Miss      -0.067731  0.335636 -0.010261  0.693916 -0.248559  0.083462   \n",
       " Title_Mr         0.038850 -0.549199  0.142698 -0.867334  0.180808 -0.250489   \n",
       " Title_Mrs        0.010256  0.341994 -0.153758  0.550146  0.167687  0.061668   \n",
       " Title_Rare       0.063948 -0.012054 -0.187174 -0.075638  0.192912 -0.025874   \n",
       " Age_Pclass       0.004083 -0.324559  0.522045 -0.172433  0.562135 -0.188211   \n",
       " \n",
       "                  Parch      Fare  Embarked  FamilySize  Title_Master  \\\n",
       " PassengerId  -0.001652  0.012658 -0.030467   -0.040143     -0.026151   \n",
       " Survived      0.081629  0.257307  0.106811    0.016639      0.085221   \n",
       " Pclass        0.018443 -0.549500  0.045702    0.065997      0.082081   \n",
       " Sex           0.245489  0.182333  0.116569    0.200988     -0.159934   \n",
       " Age          -0.172482  0.096688 -0.009165   -0.245619     -0.373960   \n",
       " SibSp         0.414838  0.159651 -0.059961    0.890712      0.349559   \n",
       " Parch         1.000000  0.216225 -0.078665    0.783111      0.267344   \n",
       " Fare          0.216225  1.000000  0.062142    0.217138      0.010908   \n",
       " Embarked     -0.078665  0.062142  1.000000   -0.080281     -0.012419   \n",
       " FamilySize    0.783111  0.217138 -0.080281    1.000000      0.372472   \n",
       " Title_Master  0.267344  0.010908 -0.012419    0.372472      1.000000   \n",
       " Title_Miss    0.100998  0.119518  0.170479    0.107500     -0.110981   \n",
       " Title_Mr     -0.333905 -0.183766 -0.113971   -0.338014     -0.254903   \n",
       " Title_Mrs     0.223575  0.107259 -0.038203    0.153842     -0.087987   \n",
       " Title_Rare   -0.059535  0.016275  0.018804   -0.047426     -0.035291   \n",
       " Age_Pclass   -0.134979 -0.353204  0.018734   -0.196069     -0.298028   \n",
       " \n",
       "               Title_Miss  Title_Mr  Title_Mrs  Title_Rare  Age_Pclass  \n",
       " PassengerId    -0.067731  0.038850   0.010256    0.063948    0.004083  \n",
       " Survived        0.335636 -0.549199   0.341994   -0.012054   -0.324559  \n",
       " Pclass         -0.010261  0.142698  -0.153758   -0.187174    0.522045  \n",
       " Sex             0.693916 -0.867334   0.550146   -0.075638   -0.172433  \n",
       " Age            -0.248559  0.180808   0.167687    0.192912    0.562135  \n",
       " SibSp           0.083462 -0.250489   0.061668   -0.025874   -0.188211  \n",
       " Parch           0.100998 -0.333905   0.223575   -0.059535   -0.134979  \n",
       " Fare            0.119518 -0.183766   0.107259    0.016275   -0.353204  \n",
       " Embarked        0.170479 -0.113971  -0.038203    0.018804    0.018734  \n",
       " FamilySize      0.107500 -0.338014   0.153842   -0.047426   -0.196069  \n",
       " Title_Master   -0.110981 -0.254903  -0.087987   -0.035291   -0.298028  \n",
       " Title_Miss      1.000000 -0.601857  -0.207749   -0.083327   -0.231753  \n",
       " Title_Mr       -0.601857  1.000000  -0.477160   -0.191387    0.295167  \n",
       " Title_Mrs      -0.207749 -0.477160   1.000000   -0.066063    0.039543  \n",
       " Title_Rare     -0.083327 -0.191387  -0.066063    1.000000   -0.023549  \n",
       " Age_Pclass     -0.231753  0.295167   0.039543   -0.023549    1.000000  )"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# General Analysis of the Training Data\n",
    "\n",
    "# Basic statistical overview\n",
    "train_description = train_df.describe(include='all')\n",
    "\n",
    "# Checking for missing values in the training dataset\n",
    "missing_values_train = train_df.isnull().sum()\n",
    "\n",
    "# Checking for unique values in each column to understand the diversity of data\n",
    "unique_values_train = train_df.nunique()\n",
    "\n",
    "# Overview of correlation between features, especially with the target variable 'Survived'\n",
    "correlation_matrix = train_df.corr(numeric_only=True)\n",
    "\n",
    "train_description, missing_values_train, unique_values_train, correlation_matrix\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0277f25f-7ed1-455e-90a5-d4d3253f496e",
   "metadata": {},
   "source": [
    "<div style=\"text-align: justify;\">In this part, datasets are loaded and preprocessed. Initial loading segregates training and test datasets. An analysis, focusing on 'Sex', 'Pclass', and 'Embarked' features, is conducted on the training data. Subsequently, missing values are addressed, and columns deemed unnecessary are omitted. Finally, preprocessing further engineers and encodes features within the training dataset, preparing it for subsequent analysis and modeling.</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "73536e34-9d61-414b-8944-f2e1cd57eb7d",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABKAAAAHkCAYAAAAJqFdhAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAACG0klEQVR4nOzdeVyU5f7/8feIDIuAhkWQuKXliHuhYkJkZlpamlGpYZmFdlIpSzRPHjWjrANKbriF5ZqWZotaJ6xT32wxtdOqYHpwKxZ3UlZhfn/4Y04EIo4z3Cyv5+Ph43Fz3dd1z+eee7qv5jPXdd0mq9VqFQAAAAAAAOAk9YwOAAAAAAAAALUbCSgAAAAAAAA4FQkoAAAAAAAAOBUJKAAAAAAAADgVCSgAAAAAAAA4FQkoAAAAAAAAOBUJKAAAAAAAADgVCSgAAAAAAAA4FQkooAaxWq1GhwAAMAD3fwCoG7jfozYjAQWn2Lt3r8aPH6+ePXuqffv2Cg0N1VNPPaXdu3dXWQzvvPOO2rRpoyNHjjj0uG3atNG8efMuuH/evHlq06ZNmX+dO3fWHXfcoblz5+rcuXOX9JrZ2dmaNGmSdu7cebnh69Zbb9Wzzz572ccpz8mTJzVz5kzddtttat++vbp166aHH35Y//rXv5zyegCqH+7/de/+X955BwUFqXv37hozZox+/fXXSh9r+/btatOmjbZv3+7wOAE4Fvf7une/L3m/K/q3d+/ey3qNkvfWWZz1mZHowyqjvtEBoPb59ddf9cADD6hjx4567rnndOWVVyojI0OrVq3SAw88oJUrV6pz585Oj+OWW27RunXr5Ofn5/TXKs+6detK/X3y5Elt2rRJCxYsUGFhoZ555plKH2vPnj169913NXjwYEeH6TB5eXl68MEHde7cOUVFRalFixb6448/9OGHHyo6OlqTJ0/WiBEjjA4TgBNx/z+vrt3/S/z5vIuKivT7778rISFBDz74oDZv3qyrrrrKwOgAOBL3+/Pq6v1+/vz5F7ynN2vWrIqjQU1CAgoO9/rrr6tRo0Z67bXX5Orqaiu/7bbbdMcddygxMVFLlixxehy+vr7y9fV1+utcSHmdbq9evXTkyBGtX7/+kjqkmuCjjz7S/v379dFHH6lly5a28ttuu015eXmaN2+ehg8fLhcXFwOjBOBM3P/Pq2v3/xJ/Pe8bb7xRAQEBevDBB7Vx40aNGjXKmMAAOBz3+/Pq6v2+bdu2CgwMNDoM1EBMwYPDHTt2TFLZ+cuenp6aPHmy7rjjDlvZ8OHDNXz48FL1/jp08Z133lFQUJDefvtthYaG6uabb9bChQvVrl07nThxolTbNWvWKCgoSEePHi01vPKDDz5QmzZtlJKSUqr+559/rjZt2ujHH3+UJKWkpGjs2LEKCQlRu3btFBYWptjYWOXl5TnmzZHk5eVVpuztt9/W4MGD1blzZ3Xs2FEDBw7Uli1bbO/HQw89JEl66KGHSr1fW7du1eDBg9WhQwf17NlTsbGxysnJuWgMhYWFio2NVdeuXdW1a1dNmjTJ9l5+9tlnatOmjbZt21aqzffff682bdro22+/LfeYF7rukjR69Gg98cQTKigosJXt3btXo0eP1g033KAbbrhBY8aM0eHDh237x40bpw4dOui///2vrSwxMVEWi0Vff/31Rc8RQNXj/l+x2nr/r0j79u0lSb/99put7Oeff9Zjjz2mG2+8USEhIRo/frzS09MveIytW7dq2LBh6tKli9q3b69+/fpp1apVpeqsXLlS/fr1U4cOHRQWFqbp06frzJkztv1fffWVHnjgAXXp0kVdu3bVE088Uap/AXBpuN9XrC7e7/9q3rx56tevn7Zu3aoBAwaoQ4cOGjhwoP7zn//o+++/13333aeOHTtqwIAB5f6//datW9W3b1916NBB9913X5k6lbmObdq00fz583XvvffqxhtvVGJiYpnXyc7O1sCBA3XrrbfapuUVFxdryZIl6tOnj9q3b6++fftq5cqVZdquXbtWffv2VceOHRUZGanff//9ct+2Wo8EFBzulltu0e+//64hQ4Zo9erV2r9/v61z6tevn+65555LPmZRUZEWLVqk2NhYPfXUU7r77rtVVFSkjz/+uFS9TZs2qUePHmWGhPbp00cNGjTQ5s2by9Rv2bKlOnbsqKysLD344IPKzc3Vyy+/rKVLl+qOO+7QypUr9cYbb1xyzOfOnbP9KygoUFZWll5//XV9+eWXGjRokK3e6tWrNXXqVPXu3VuLFy9WXFycXF1dFRMTo99//13t2rXT1KlTJUlTp07VtGnTJEkffPCBxowZo2uvvVYLFizQ2LFj9f777+uJJ5646OKFH374oX7++We9/PLLmjhxoj777DM98cQTkqSwsDBdffXVeu+990q12bhxo5o2baquXbuWe8ywsDDVr19fDz/8sObPn6/vv/9ehYWFkqSOHTvq0UcflYeHhyQpLS1NQ4YM0fHjx/Xyyy/rxRdf1OHDhzV06FAdP35ckjR9+nQ1aNBA06ZNk9Vq1Z49e5SYmKgRI0aoR48el3g1AFQF7v/n1bX7f0XS0tIk/W9KRkpKioYOHWp7r2fMmKHdu3dr5MiRtj7jzz777DONGTNG7dq1U2JioubNm6cmTZrohRde0HfffSdJ2rx5s1555RU9+OCDSkpK0pgxY/Tee+8pNjZWknT48GH97W9/U7t27bRw4ULFxsbqv//9r0aNGqXi4uJLPicA3O9L1NX7fXFxcalzL/n313tqRkaGZs6cqccff1yvvvqqTp8+rejoaD399NO6//77NXv2bBUXF2v8+PFlEoB///vf9dBDD2nevHlq0KCBoqKitG/fPkm6pOu4cOFC9e3bV7Nnz1bv3r1L7Tt79qyioqKUnZ2t5cuX20Z1TZ8+XXPnztXdd9+tRYsWqV+/fnrppZe0YMECW9tVq1Zp2rRpCgsLU2Jiojp16qR//OMfFb5vYAoenGDYsGE6evSokpKSNGPGDEnSFVdcodDQUA0fPlydOnWy67iPP/64brnlFtvfXbt21ebNmzVkyBBJ0u+//67vvvtO//znP8u0dXd3V9++fbVlyxbbUNi8vDx98sknioqKknR+RE7btm01Z84c268WN910k77++mvt2LFDjz/++CXF265duzJl11xzjcaNG1dqGsLhw4c1cuRIjRkzxlYWGBiowYMH67vvvtOAAQPUunVrSVLr1q3VunVrWa1WxcfHKywsTPHx8bZ2LVq00IgRI/T555+Xeq/+ysfHR6+99prtPK+44gqNGTNG27ZtU2hoqAYNGqSVK1fq7NmzatCggQoKCvThhx/q4YcflslkKveYbdq0UUJCgp5//nnNmzdP8+bNk7u7u4KDg3XvvffqzjvvtNWdP3++3N3d9cYbb9hi6NGjh2677Ta99tprmjRpkho3bqzp06frySef1Ntvv61Vq1bp2muv1dNPP12Jdx+AEbj/n1fX7v8l/rzgbl5enlJSUvTSSy/J29tbd999t6TzI1kbNmyoZcuWyc3NTZLk7++vp556SqmpqWWOuW/fPg0aNEjPPfecraxLly7q3r27duzYoRtuuEHbt29XkyZN9OCDD6pevXrq1q2bPD09dfLkSUnSjz/+qLy8PI0ePVpXX321JCkgIECffPKJcnJyyh2pAKBi3O/Pq6v3+z59+pRb3qNHj1IJoNzcXE2bNk0333yzJGn//v2aNWuWXnzxRUVEREg6n3iMjo5WWlqa2rZta2s7bdo09e/f33bc3r17a+HChZo1a9YlXceOHTuWuha//PKLJCk/P19/+9vfbGuXNW3aVNL5H07eeustPf3007Z2oaGhMplMWrx4sYYNG6ZGjRopMTFRffv21ZQpU2x1zpw5o7Vr11b43tV1JKDgFE8++aRGjBihL774Ql9//bW2b9+uDz74QJs2bdLkyZP18MMPX/Ixr7/++lJ/Dxw4UP/4xz+UlZUlPz8/bd68WR4eHhe8Id59991655139MMPP6hTp0769NNPlZOTo7vuukvS+ZtGaGioCgsLlZaWpgMHDig1NVUnTpxQo0aNLjne9evXSzqfWV+xYoW2b9+u5557TrfddlupeiVPqPjjjz904MABHThwwDbEtLxfgyXpv//9rzIyMjR69OhS/8PftWtXeXl56csvv6ywQwoPDy/1P9y33nqrXF1d9dVXXyk0NFT33nuvlixZouTkZA0aNEhbt25VdnZ2qV9yynP77berV69e+uabb/TVV19p+/bt+uqrr7Rt2zZ99NFHmjNnjkwmk7755ht1795d7u7utvi9vLwUHBysr776yna8fv36qX///po2bZpcXV21fv16mc3mCmMAYCzu/3Xz/i+V/0WsdevWmjdvnm2kwq5duxQeHm5LPknnvxx8+umnklTmyUGPPfaYJCknJ0eHDh1SWlqafvrpJ0n/e49CQkK0bt06DR48WLfffrtuueUW3XXXXbYvUJ06dZKbm5siIiJ05513Kjw8XMHBwerYseNFzwnAhXG/r7v3+4ULF5a7CHl5Cf0bbrjBtn3llVdKKr12Vsn7np2dbStzcXHR7bffbvvbzc1NN998s/79739LurTr+NfPVImJEyfq559/1osvvmhLPknSN998I6vVqltvvbXU+37rrbdq4cKF2rVrl1q2bKnjx4+XGVF1xx13kIC6CBJQcJqGDRtqwIABGjBggCRp9+7dmjhxouLj43X33XfriiuuuKTjNW7cuNTf/fr10wsvvGDL1G/atEm33367bZrXX4WEhCggIECbN29Wp06dtGnTJgUHB9uGWhYXF2v27NlavXq1cnJyFBAQoI4dO5b6n+RL0aFDB9t2t27d9Oijj+qpp57S66+/XmpY66FDhzR16lR98803ql+/vq699lrbo0cvNLT21KlTkqTnn39ezz//fJn9WVlZFcZWcvMvUa9ePTVq1Mh242/evLm6du2qd999V4MGDdK7776rkJAQNWnS5KLn7erqqrCwMIWFhdliiY2N1b/+9S999tln6tWrl06dOqUtW7bY5r3/2V8Xkhw0aJA2b96s5s2bq1WrVhd9fQDG4/5fN+//JV/EpPN9wVVXXVXm2p06dapMWUVOnDihadOmaevWrTKZTGrevLluvPFGSf97j+68804VFxdrzZo1mj9/vubMmaMmTZromWeeUf/+/RUYGKhVq1ZpyZIleuutt/TGG2/Ix8dHw4YN05NPPql69ViRArAX9/u6eb+//vrrK70IeXlJKXd39wrbNGrUqNTi9tL5z0ZJ7JdyHf/6PpTIzMxU+/bttWDBAt1xxx1q0KCBpP+97yWjr8prV/J95a/fW3ja68WRgIJDZWZm6t5779WTTz6p++67r9S+oKAgPfXUU7bFpks6pKKiolL1KrOonnT+Zta7d299+OGHCg0NVUpKiiZNmnTB+iaTSXfddZfee+89jRkzRv/3f/9nm18tSUuWLNEbb7yh6dOnq2/fvvL29pYk2/DQy1GvXj299NJLuvPOOzV58mRt3rxZbm5uKi4u1qhRo+Tq6qq33npLQUFBql+/vvbt26f333//gsfz8fGRdD5z361btzL7GzZsWGE8f/6FQTp/DU6ePFmq07/33ns1efJkpaWl6csvv9TMmTMrPOaQIUPUsmXLMvX8/PxsCah9+/apV69e8vb21k033aRHHnmkzHHq1//fbSkvL08vvviirr/+eu3fv19Lly695KHRAKoG9//y1YX7f4k/fxG7EG9v7zILCkvnFwm2WCxlyidMmKD9+/fr9ddf1w033CCz2azc3Fy9/fbbpeqVfAH+448/tG3bNi1dulQxMTEKDg7W1VdfrY4dO2r+/PkqKCjQrl27tG7dOi1atEht2rQpNUUcwMVxvy9fXbrfO9sff/whq9VaairgsWPHbAkfR1zH+fPny8vLS4MGDVJCQoJtKl3J+758+XJbUurPrrnmGtt7W7J2bYmS5BUujJ984FBXXnml6tevrzVr1ig/P7/M/v/+979yc3NT8+bNJZ3vVDIyMkrVKVlUtDIGDhyoH374QatXr5afn59CQkIuWj8zM1Pz5s2TyWRSv379bPt27dql1q1bKyIiwnYTy8zM1N69ex2ySGlAQID+9re/6fDhw7bH0p48eVJpaWmKiIhQx44dbcmX//u//5Mk2+u6uLiUOta1116rxo0b68iRI+rQoYPtn7+/v2bNmqXdu3dXGMtXX31Vakjpv/71L507d07du3e3lfXt21eenp6aOnWq3N3dSw2DLU+TJk300UcflXqSXYmSRWhLhsB269ZN+/btU9u2bW2xt2/fXm+88YaSk5Nt7WbNmqXff/9dc+bMsS1uXt4aIQCMx/3/wmr7/f9SBAcH64svvij1VNTU1FSNGjXKNrXuz3bt2qW+ffsqJCTENgX7r+/RU089pbFjx0o6n+C644479MQTT6ioqEhZWVl64403dOutt6qgoEBms1k9evTQCy+8IEkVPn0PQPm4318Y93vHKCgo0DfffGP7++zZs/rss89ssTviOl555ZVq3bq1HnnkEa1evVr/+c9/JMk2cu3kyZOl3vdTp07p1Vdf1alTp9SiRQsFBAToo48+KnXMkimCuDBGQMGhXFxcNH36dI0ZM0b33nuvHnzwQbVq1Uq5ubn68ssvtXr1aj355JO2jH2vXr306aef6sUXX9Rtt92mXbt26d13363064WGhsrX11dr167ViBEjLjqMvnXr1mrXrp3WrFmjPn362G5Y0vk1KBITE7VkyRJ17txZBw8e1OLFi1VQUKDc3Fy73o+/GjFihNavX6+lS5dq0KBBatq0qZo0aaLVq1fL399fPj4+2rZtm5YvXy5JttctifOzzz5Tw4YNZbFYNH78eE2dOlUuLi7q1auXsrOzlZiYqMzMzHLX4fizY8eOady4cRo+fLgOHDig2bNnq2fPnqWeLufh4aH+/ftr3bp1uv/++y86VHb8+PHavn27IiIi9NBDD6lLly6qV6+efvrpJy1btkw333yzbQHCJ554QkOGDNHo0aM1dOhQubm5ad26ddq6davmzp0rSdqxY4dWrlypp556Stdee63GjRunf/3rX3r22Wf11ltvlRmWC8BY3P8rVpvv/5fiiSee0AMPPKCoqCg9/PDDKigo0Jw5c9SuXTvdfPPNti8AJTp27KgPPvhA7dq1k7+/v/7zn/9o8eLFMplMtvcoJCRE06ZN0yuvvKKbb75Z2dnZmj9/vlq0aCGLxSJXV1fFx8drzJgxioyMlIuLi9auXSuz2axevXo57NyAuoL7fcXqwv1+z549OnbsWLn7rrnmGvn5+VXqOBfi6uqqv//973r66afl5eWlJUuWKC8vz/YUP0dexzFjxmjz5s2aMmWKNm7cqOuvv1533323/vGPf+i3335T+/btlZaWpoSEBAUGBqpFixYymUyaMGGCnnnmGU2ZMkX9+vXT999/rzfffPOyzrsuIAEFh7vlllv01ltvKSkpSYsWLdKJEydkNpsVFBSkhISEUpn1e++9V4cOHdLGjRu1bt06devWTXPmzNHQoUMr9VouLi7q37+/li9fbnvCzsUMHDhQv/zyS5n6o0eP1smTJ7VixQotWLBAAQEBGjhwoO2JB6dPn77oUNeLMZvN+vvf/67Ro0dr5syZSkxMVGJiol588UU9++yzMpvNat26tRYuXKiXXnpJO3fu1PDhw3XddddpwIABWr16tb744gtt2rRJ9913nxo0aKDXXntN69atk6enp2644QbFx8eXWkivPPfff7/y8vI0ZswYmc1m3XXXXYqJiSnzxItevXrZFna9mMDAQG3cuFGLFy/WBx98oKVLl8pqtap58+Z69NFH9dBDD9mOb7FYtHr1aiUkJGjixImyWq26/vrrtWDBAvXu3Vs5OTmaPHmyrr/+ej366KOSJE9PT02bNk2jRo3SwoULFR0dbedVAOAs3P8vrDbf/y9FUFCQVq5cqVmzZmn8+PFq0KCBwsPDNWHChHIfMvHyyy/rhRdesI1YatGihZ5//nm9//772rlzp6TzU8ALCwu1du1arVmzRu7u7urRo4diYmLk6uoqi8WiRYsWacGCBXr66adVVFSk9u3ba9myZbr22msden5AXcH9/sLqwv2+ZNRpeSZOnGj7/3d7NWzYUDExMYqPj9fRo0fVqVMn2xOxJcdeR3d3d02dOlWjR4/WokWLFB0drZkzZ2rx4sVau3atMjIy1LhxY91555166qmnbCPVBgwYoHr16ikxMVHvvfeerr/+es2YMYMndl+EyXqhVc8A1HnTp0/Xrl279MEHHxgdCgCgCnH/B4C6gfs9qhIjoACUsWLFCv33v//VunXrqs1ihAAA5+P+DwB1A/d7GIEEFIAydu7c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4VUpElAAqkx2draCgoLUokULo0MB6qzMzEw999xz2rVrl1q2bGl0OLiAgwcP6ssvv9Sbb76pG264QZL03HPP6f/+7/+0adMmw0aRoqyTJ08qMDBQf/vb33TddddJkp544gkNHDhQv/76qzp27GhwhEDlrVmzRhEREbr//vttZddee60yMjK0YsUKElDVyNy5c5WSkqLNmzfL39/fVv7cc88pJydHL730kvr06aMGDRoYGCXOnj2rRx55RMePH9e4ceN04403KicnR8nJyXrmmWd03333aerUqUaHWWWYggdJUps2bbRp0yY99NBD6tixo/r06aNPP/1Un376qfr27avOnTvrscce04kTJ2xtPv30Uw0ZMkRdunRRhw4dFBERoa+++uqCr7F//35FRUWpS5cuCg0N1TPPPKOjR49WxemhGrj11lv17bff6t1331WbNm20fft2bdiwQXfccYc6duyoO+64Q8uXL1dxcbEk6ciRI2rTpo0+//xzDR48WB06dNBdd92l77//Xm+//bZ69eqlG264Qc8884zy8/Ntr7NhwwYNGjRIHTt2VOfOnTV8+HD98ssvF4zru+++04MPPqiOHTvqlltu0fPPP68zZ844/f0AjPLLL7+oYcOGev/999WpUyejw8EFXHHFFVqyZInat29vKzOZTLJarTp9+rSBkeGvrrjiCs2ePduWfDp27JiSkpLk7++v1q1bGxwdcGnq1aun7777rsx9JioqSuvWrTMoKvxVYWGh3n77bUVERJRKPpV48skn9dprr8nd3d2A6PBnr7zyijIyMvTWW29p0KBBatq0qdq0aaOxY8dqwYIFWr16tTZv3mx0mFWGBBRsYmNj9eCDD2rTpk1q3bq1nnnmGS1cuFBxcXFatGiRfvzxRy1dulSS9PPPP2vMmDG6/fbb9f777+vtt99W48aNNWHCBBUUFJQ5dmZmpoYNG6amTZtq/fr1WrRokc6cOaMhQ4YoJyenqk8VBli/fr26dOmiO+64Q9u2bdOBAwf0yiuvaMyYMdq8ebOeeuopLV26VPHx8aXazZgxQxMmTNC7774rd3d3jRo1Sh9++KEWLVqkl19+Wf/617/09ttvS5KSk5M1bdo0jRgxQh9++KGWL1+uvLw8Pffcc+XGlJKSohEjRqhnz556//33FR8fr19++UUjR46U1Wp1+nsCGOHWW2/V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ESN05MiRMu0XLFigm266SV26dNETTzyhw4cPl9q/detWDRs2TF26dLHd/1etWmXbv337drVp00Zr165Vr169dNNNN2nbtm1lXmf37t0KDg7Wo48+auuPTp06palTp+qmm25Shw4ddP/995fqe6Tz/c/MmTPVs2dPdenSRZMnT1Z+fr4j3jrUUiSgAAe75ZZb9Pvvv2vIkCFavXq19u/fb0tG9evXT/fcc48k6YMPPtCYMWN07bXXasGCBRo7dqzef/99PfHEE7JarfLy8tKLL76oAwcOaNGiRZKkNWvW6Msvv9SLL76oK6+80rBzBABUXlpamiSpadOmWrt2rZ5++mm1bdtW8+fP1+jRo7VmzRpNnz693Lbx8fFasGCBHnjgAb322muaMWOGTp48qSeffNL2g8WLL76ozz//XJMmTVJSUpJ69+6tV155Re+8846k8wmvV155RQ8++KCSkpI0ZswYvffee4qNja2S8weA2urcuXPl/vvzD9GbN2/WV199pRdffFGTJ0/WV199pcjISK1cuVKTJk3Sc889px9++EEzZswodexdu3bpgw8+0NSpUxUbG6uUlBSNGDHCliD67LPPNGbMGLVr106JiYmaN2+emjRpohdeeEHfffddqWMlJCRo0qRJmjRpUplRW/v379ejjz6qjh07KjExUWazWfn5+Xr44Yf1ySefaPz48Zo/f778/f312GOPlUpCxcTEaN26dYqKitKrr76q06dP64033nDsm4xahSl4gIMNGzZMR48eVVJSkq0jueKKKxQaGqrhw4erU6dOslqtio+PV1hYmOLj421tW7RooREjRujzzz/XLbfcoh49emjYsGFasuT/tXf/MVVXfxzHn1x+ClghMlH8GenlRxaQIbQ0roVUQnMQw0a5m/MHSu7qDBtjgcDckmDSxkC/eG1tQEo2htiKsrnyB0vdbDFLF4n9sMTrlB8WlYjfP+78fL1ftOSrN/va67Gx3XvP53Pu53z+4HPP+5zzPv8iJiaG8vJysrKymDNnzu1qnoiIXMfly5cZGBgw3vf09HDw4EFqamqIiYkhKiqKnJwckpOTWb9+vXHcb7/9RlNT0zVnQZ05c4bVq1cbCWkB/Pz8WLlyJcePHyc2NpaDBw/yyCOPMG/ePABmzpyJv78/QUFBgHMEPCwsjOzsbEwmE/Hx8fj7+3P+/Hl33QoRkTveqVOniI6OvmaZzWZjxYoVgDMfYFVVlbERxUcffcS+ffvYvXs3EyZMAOCrr76iubnZpQ6TyYTdbicsLAyA8PBw5s+fT1NTE1lZWXR0dDB//nwKCgqMc2JjY5k5cyaHDh0iLi7O+HzBggU8+eSTQ67z+++/x2q1Yjabqa6uxtfXF4Dm5maOHTtGY2MjDz74IACzZ8/mhRdeoLy8nHfffZevv/6a1tZWCgsLyc7OBmDWrFmkpaXR0dEx/Bsq/wgKQIm4gc1mw2q1snfvXtra2vjss89oaWlh165d5Ofn8+ijj3L69GmWLVvm0ll5+OGHCQwMZP/+/SQlJQHw8ssvs3fvXpYtW8bEiRPJz8+/Ta0SEZE/cujQoSGdEZPJRGJiIqWlpZw8eZKzZ8/yxBNPuBxjtVqxWq3XrLOiogKAc+fO8e2339LZ2WnsWnTx4kXAGXDatm0bXV1dWCwWHnvsMXJzc406EhIS2L59O+np6cydO5ekpCTS0tKUEF1E5CaEhIRQU1NzzbIxY8YYr8PDw112QQ0JCWHUqFFG8Amcu+b19fW51BETE2MEnwAiIiIYP348Bw4cICsri8WLFwPwyy+/8N1339HZ2Ul7ezvwn+fDFWazecg1/vzzz1itVhwOB/X19fj5+RllbW1thISEEB0d7dJXsVgslJWV0dPTw+HDhwF4/PHHjXKTyURKSooCUHJdCkCJuMndd99NamoqqampgHNt9dq1aykvLzfygRQXF1NcXDzk3DNnzhiv/f39SUlJoba2loSEBEaMGPHXNEBERIYlOjra+J/u4eGBr68vY8eOJTAwEHAupwAIDg6+4Trb29spLi6mvb0dPz8/7rvvPqNDcmWJR0FBAaGhoezcudP4/tjYWAoLC4mKiuLpp59mcHCQhoYGqqqqeOONNwgLC2PNmjXGrCkRERkeHx8fpk+f/qfHXXkGXO1Gfs9fK91GcHAwvb29gHNgoqioiN27d+Ph4cGkSZN46KGHgKG5aK/13Onu7mbKlClcuHCBsrIylx39uru7cTgc153h5XA46OnpAWDUqFEuZSEhIX/aNvnnUgBK5Bbq6uoiIyMDm81GZmamS1lUVBSrVq0iNzeXS5cuAbB27Vri4+OH1HP1KElHRwdvvfUWkZGRNDY2kpaWxowZM9zbEBERGbaAgIA/7IzcddddgLPTcLXu7m6OHj06JC/HhQsXWLx4MWazmV27dhEeHo7JZOKTTz6htbXVOM7Hx4fly5ezfPlyfvzxR/bs2UN1dTVr1qzh/fffBzAGRPr6+ti3bx+1tbXk5eUxY8YMl5F6ERH5e7gSaLqaw+EgNjYWcK6S+Oabb3jzzTeJi4vDx8eH/v5+3nnnnRuq/5577sFut/Pee+/x6quv8uGHHzJ37lwARo4cyeTJk11ShVxt/PjxxjLvs2fPMm7cOKOsu7t7OM2UfxglIRe5hUaPHo2XlxcNDQ3X3AHixIkT+Pr6MnXqVIKDg/nhhx+YPn268RcaGkpFRQVffvkl4Exs+MorrxAWFsbbb7/N/fffT35+vpF4VkRE/n/ce++9BAUF8fHHH7t83tLSwpIlS4Y8N06cOEF3dzcLFy5k6tSpmEzOn22ffvopAIODg/z666+kpKQYu96NGzeO7Oxs5s2bx+nTpwFYtWoVL730EuDsVDz11FOsWLGCS5cuucy4FRGRv48jR464LMv74osvOHXqFAkJCYBzVm1KSgoJCQn4+PgArs+HPxMQEEBAQACZmZnExsZSUlJiBL3i4+P56aefCA4OdumrtLW1sWXLFjw9PY3r+OCDD1zq3bNnz803Xu5YmgElcgt5enqybt06cnNzycjIIDs7m/DwcPr7+9m/fz/19fXYbDaCgoJYvXo1hYWFeHp6YrFY6O3tpbq6mq6uLmO66+bNmzl69Ch1dXWMGDGC0tJSMjIyKC8vp7Cw8Da3VkREhsPT05OVK1dSUlLCunXrSE5O5uTJk1RWVvLcc88NWcYwZcoUAgMD2bRpE15eXnh5edHa2sqOHTsA6O/vx8/Pj+joaKqqqvD29sZsNtPZ2UlTUxMpKSmAMwdUUVERGzZsYPbs2fT29lJVVcXkyZOJiIj4y++DiMid4Pfff+fzzz+/bvm0adNuqv7BwUGWLl1KTk4O58+fp6KigmnTpvHMM88A8MADD9DS0kJ0dDShoaEcOXKEzZs34+HhQX9//w1/j4eHB8XFxaSnp7NhwwbWr19Peno6dXV1vPjii+Tk5DB27FgOHDhAbW0tzz//PN7e3kyaNImsrCw2btzIwMAAkZGRNDc3c/z48Ztqt9zZFIASucWSkpJobGzEbrezadMmzp07h4+PD1FRUWzcuNGY2pqZmUlAQABbtmxh+/bt+Pv7ExcXR3l5ORMmTODYsWPU1NSwYMECY8ldREQEVqsVu91OcnIyiYmJt7OpIiIyTNnZ2fj7+2O329mxYwdjxoxh0aJFLF26dMixI0eOpLq6mrKyMmw2GwEBAURGRlJXV8eSJUs4fPgwc+bMoaSkhMrKSrZu3YrD4SA4OJhnn30Wm80GOHc/unjxItu2baOhoQE/Pz8SExPJy8vD29v7r74FIiJ3BIfDQVZW1nXLrwwW/K8sFgsTJ04kLy+PgYEBLBYLBQUFxk51r732GqWlpZSWlgLO3bSLi4vZuXOnkSD8RpnNZhYuXMjWrVtJTU0lMTGR+vp6KioqeP311+nr6zNyBy5atMg4r6ioiNGjR1NXV0dPTw+zZs0iJyeHysrKm2q73Lk8Lv93hjIREREREREREZFbSDmgRERERERERETErRSAEhERERERERERt1IASkRERERERERE3EoBKBERERERERERcSsFoERERERERERExK0UgBIREREREREREbdSAEpERERERERERNxKASgREREREREREXErBaBERERERERERMStFIASERERERERERG3UgBKRERERERERETcSgEoERERERERERFxq38DUB3/imSzai0AAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1200x500 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# load_dataset, fill_missing_values, preprocess_data\n",
    "\n",
    "# Load dataset\n",
    "train_df = load_dataset('train.csv')\n",
    "test_df = load_dataset('test.csv')\n",
    "\n",
    "# Detailed Analysis of Categorical Features: 'Sex', 'Pclass', and 'Embarked'\n",
    "demonstrate_preprocessing(train_df)\n",
    "\n",
    "# Fill missing values and drop unnecessary columns\n",
    "train_df = fill_missing_values(train_df)\n",
    "\n",
    "# Apply preprocessing steps to engineer and encode features\n",
    "train_df = preprocess_data(train_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e60f14a-e2fc-458b-9eb7-5c95085f3e85",
   "metadata": {},
   "source": [
    "# Feature Engineering"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad70b0cb-1880-4ebe-8d28-5517ca34f4d9",
   "metadata": {},
   "source": [
    "<div style=\"text-align: justify;\">In the feature engineering phase, new attributes like 'FamilySize' are created, titles are extracted from names, unnecessary features are removed, and interaction terms are added to enrich the dataset. The data is then scaled and divided into training and validation sets, preparing it for the modeling stage. This step is vital for enhancing the dataset's complexity and potential predictive power.</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a03b5f44-da44-4eee-8c66-dd78ce0a1835",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   PassengerId  Survived  Pclass  Sex   Age  SibSp  Parch     Fare  Embarked  \\\n",
      "0            1         0       3    0  22.0      1      0   7.2500         0   \n",
      "1            2         1       1    1  38.0      1      0  71.2833         1   \n",
      "2            3         1       3    1  26.0      0      0   7.9250         0   \n",
      "3            4         1       1    1  35.0      1      0  53.1000         0   \n",
      "4            5         0       3    0  35.0      0      0   8.0500         0   \n",
      "\n",
      "   FamilySize  Title_Master  Title_Miss  Title_Mr  Title_Mrs  Title_Rare  \\\n",
      "0           2         False       False      True      False       False   \n",
      "1           2         False       False     False       True       False   \n",
      "2           1         False        True     False      False       False   \n",
      "3           2         False       False     False       True       False   \n",
      "4           1         False       False      True      False       False   \n",
      "\n",
      "   Age_Pclass  \n",
      "0        66.0  \n",
      "1        38.0  \n",
      "2        78.0  \n",
      "3        35.0  \n",
      "4       105.0  \n"
     ]
    }
   ],
   "source": [
    "# Create 'FamilySize' feature\n",
    "train_df = create_family_size_feature(train_df)\n",
    "\n",
    "# Extract and process titles from 'Name'\n",
    "train_df = extract_and_process_titles(train_df)\n",
    "\n",
    "# Drop unnecessary features\n",
    "train_df = drop_unnecessary_features(train_df)\n",
    "\n",
    "# Add interaction terms\n",
    "train_df = add_interaction_terms(train_df)\n",
    "\n",
    "# Prepare the dataset for model training\n",
    "features = ['Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'FamilySize', 'Sex']\n",
    "X = train_df[features]\n",
    "y = train_df['Survived']\n",
    "\n",
    "# Define features after feature engineering steps are applied\n",
    "features = train_df.columns.drop('Survived')\n",
    "\n",
    "# Splitting the data into training and validation sets\n",
    "X_train, X_val, y_train, y_val = train_test_split(train_df[features], train_df['Survived'], test_size=0.2, random_state=42)\n",
    "\n",
    "# Scaling\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_val_scaled = scaler.transform(X_val)\n",
    "\n",
    "print(train_df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0c73d93-e727-43c0-a78a-08dba5a2a257",
   "metadata": {},
   "source": [
    "# Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59b40c84-282d-4839-bb96-8b21357444f9",
   "metadata": {},
   "source": [
    "<div style=\"text-align: justify;\">The hyperparameter tuning process identifies the optimal settings for the RandomForestClassifier model, using a defined set of features that include both original and engineered variables. The tuning results in selecting the best combination of 'max_depth', 'min_samples_split', and 'n_estimators', achieving a promising accuracy score. This step is critical for optimizing model performance by systematically exploring a range of hyperparameter values.</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ee62b39a-c051-4b17-9d55-f02548b1a437",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Parameters: {'max_depth': 10, 'min_samples_split': 2, 'n_estimators': 200}\n",
      "Best Score: 0.8327914129684263\n"
     ]
    }
   ],
   "source": [
    "# Define features used for the model based on preprocessing and feature engineering steps\n",
    "features = ['Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'FamilySize', 'Sex', 'Title_Master', 'Title_Miss', 'Title_Mr', 'Title_Mrs', 'Age_Pclass']\n",
    "X = train_df[features]\n",
    "y = train_df['Survived']\n",
    "\n",
    "# Hyperparameters to tune\n",
    "parameters = {\n",
    "    'n_estimators': [100, 200],\n",
    "    'max_depth': [5, 10],\n",
    "    'min_samples_split': [2, 4]\n",
    "}\n",
    "\n",
    "# Tune hyperparameters for RandomForestClassifier\n",
    "best_params, best_score = tune_hyperparameters_grid(RandomForestClassifier(random_state=42), X, y, parameters)\n",
    "print(f\"Best Parameters: {best_params}\")\n",
    "print(f\"Best Score: {best_score}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38813a51-0fd7-4320-9b92-65feada45fac",
   "metadata": {},
   "source": [
    "# Model Training and Evaluation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61875c8a-9b96-43a1-b81d-d56e434bcfba",
   "metadata": {},
   "source": [
    "<div style=\"text-align: justify;\">During the model training and evaluation, the RandomForestClassifier is optimized with previously determined best hyperparameters. After scaling the features, the model is trained and evaluated on a validation set, achieving an accuracy of approximately 83.8%. This demonstrates the model's effective predictive capability on the given dataset.</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c9901dae-59e6-4571-8018-639f66de0674",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation Set Accuracy: 0.8379888268156425\n"
     ]
    }
   ],
   "source": [
    "# Continue using the 'best_params' obtained from hyperparameter tuning\n",
    "\n",
    "best_params = {\n",
    "    'n_estimators': [100],  # Example: Number of trees in the forest, already correctly wrapped in a list\n",
    "    'max_depth': [10],  # Corrected: Wrapped the single value in a list\n",
    "    'min_samples_split': [2],  # Assuming this was also correctly wrapped in a list\n",
    "    'min_samples_leaf': [1]  # Assuming this was also correctly wrapped in a list\n",
    "}\n",
    "\n",
    "\n",
    "# Training and evaluation setup\n",
    "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Feature scaling\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_val_scaled = scaler.transform(X_val)\n",
    "\n",
    "# Model Training\n",
    "model_trainer = ModelTrainer(RandomForestClassifier(random_state=42), best_params)\n",
    "best_model = model_trainer.train(X_train_scaled, y_train)\n",
    "\n",
    "# Model Evaluation on Validation Set\n",
    "accuracy = ModelEvaluator.evaluate_model(best_model, X_val_scaled, y_val)\n",
    "print(f\"Validation Set Accuracy: {accuracy}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e1acff9-c30e-4843-a94d-e1cab5b946eb",
   "metadata": {},
   "source": [
    "<div style=\"text-align: justify;\">The test dataset undergoes the same preprocessing and feature engineering steps as the training dataset to ensure consistency in data structure and features. This preparation enables the application of the trained model to the test data, leading to the generation of survival predictions which are then formatted for submission.</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "52b2b912-722f-4d24-a643-de681261bf0d",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived\n",
       "0          892         0\n",
       "1          893         0\n",
       "2          894         0\n",
       "3          895         0\n",
       "4          896         1"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_df = fill_missing_values(test_df)\n",
    "test_df = preprocess_data(test_df)\n",
    "test_df = create_family_size_feature(test_df)\n",
    "test_df = extract_and_process_titles(test_df)\n",
    "test_df = drop_unnecessary_features(test_df)\n",
    "test_df = add_interaction_terms(test_df)\n",
    "\n",
    "X_test = test_df[features]\n",
    "\n",
    "# Ensure test_df_processed has the same columns as those used in training the model\n",
    "if set(features) <= set(X_test.columns):\n",
    "    X_test = test_df[features]\n",
    "else:\n",
    "    raise ValueError(\"Test data missing some features used in training\")\n",
    "\n",
    "\n",
    "#X_test_scaled = scaler.transform(X_test)\n",
    "X_test_scaled = scaler.transform(X_test) #scaler.transform(X_test)\n",
    "\n",
    "# Making predictions using the final Random Forest model\n",
    "test_predictions = best_model.predict(X_test_scaled)\n",
    "\n",
    "# Preparing the submission file format\n",
    "submission = pd.DataFrame({\n",
    "    'PassengerId': test_df['PassengerId'],\n",
    "    'Survived': test_predictions\n",
    "})\n",
    "\n",
    "# Displaying the first few rows of the submission file\n",
    "submission.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "795d5205-1e63-4532-902a-42bbf0fbb06a",
   "metadata": {},
   "source": [
    "# Generate Submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "fca3d7c2-83d7-4689-881b-3c23ad3f6db2",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Submission file saved to submission.csv\n"
     ]
    }
   ],
   "source": [
    "# Generate submission file\n",
    "submission_file_path = 'submission.csv'\n",
    "generate_submission(submission, submission_file_path)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
